import { StatusCodes } from 'http-status-codes'
import { ENV } from '~/config/environment'
import { JwtProvider } from '~/providers/JwtProvider'
import ApiError from '~/utils/ApiError'

// middlewares ch·ªãu tr√°ch nhi·ªám quan tr·ªçng x√°c th·ª±c JWT accesstoken nh·∫≠n ƒë∆∞·ª£c  t·ª´ ph√≠a fe c√≥ h·ª£p l·ªá kh√¥ng
const isAuthorized = async(req, res, next) => {
  // L·∫•y accessToken n·∫±m trong request cookies ph√≠a client,- withCredential trong File authrizeAxios
  // console.log(req)
  const clientAccessToken = req.cookies?.accessToken

  // n·∫øu nh∆∞ clientActoken kh√¥ng t·ªìn t·∫°i th√¨ tr·∫£ v·ªÅ l·ªói lu√¥n clientAccessToken
  if ( !clientAccessToken ) {
    next( new ApiError(StatusCodes.UNAUTHORIZED, 'UNAUTHORIZED! (token not found)'))
    return
  }

  try {
    // B∆∞·ªõc 1:Th·ª±c hi·ªán gi·∫£i m√£ token xem c√≥ h·ª£p l·ªá hay kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(clientAccessToken, ENV.ACCESS_TOKEN_SECRET_SIGNATURE)
    // console.log(accessTokenDecoded)
    // B∆∞·ªõc 2: Quan tr·ªçng: n·∫øu nh∆∞ c√°i token h·ª£p l·ªá,, th√¨ s·∫Ω c·∫ßn ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o c√°i req.jwtDecoded,
    // ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng c·∫ßn x·ª≠ l√Ω ·ªü ph√≠a sau
    req.jwtDecoded = accessTokenDecoded
    // B∆∞·ªõc 3: Cho ph√©p c√°i request ƒëi ti·∫øp
    next()
  } catch (error) {
    // console.log('üöÄ ~ authMiddlewares.js:27 ~ error:', error)
    // N·∫øu c√°i accessToken n√≥ b·ªã h·∫øt h·∫°n (expired) th√¨ m√¨nh c·∫ßn tr·∫£ v·ªÅ m·ªôt c√°i m√£ l·ªói GONE_410 cho ph√≠a FE bi·∫øt ƒë·ªÉ g·ªçi api refreshToken
    if (error?.message?.includes('jwt expired')) {
      next( new ApiError(StatusCodes.GONE, 'Neef to refresh token.'))
      return
    }
    // N·∫øu nh∆∞ accessToken kh√¥ng h·ª£p l·ªá do b·∫•t k·ª≥ ƒëi·ªÅu  g√¨ th√¨ kh√°c v·ª• h·∫øt h·∫°n th√¨ ch√∫ng ta th·∫≥ng try {
    // tr·∫£ v·ªÅ m√£ 401 cho ph√≠a FE g·ªçi api sign_out lu√¥n
    next( new ApiError(StatusCodes.UNAUTHORIZED, 'UNAUTHORIZED! (invalid)'))
  }
}

export const authMiddleware = { isAuthorized }