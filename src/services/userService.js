/* eslint-disable no-useless-catch */

import bcryptjs from 'bcryptjs'
import { StatusCodes } from 'http-status-codes'
import { v4 as uuidv4 } from 'uuid'
import { ENV } from '~/config/environment'
import { userModel } from '~/models/userModel'
import { JwtProvider } from '~/providers/JwtProvider'
import { notifyAdmin } from '~/providers/NodeMailer'
import ApiError from '~/utils/ApiError'
import { htmlContent, WEBSITE_DOMAIN } from '~/utils/constants'
import { pickUser } from '~/utils/fomartter'


const createNew = async ( reqBody ) => {
  try {

    // ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng ch∆∞a
    const existUser = await userModel.findOneByEmail(reqBody.email)
    if (existUser) { throw new ApiError(StatusCodes.CONFLICT, 'Email already exists!')}
    // t·∫°o data ƒë·ªÉ l∆∞u v√†o database
    const nameFromEmail = reqBody.email.split('@')[0]
    const newUser = {
      email: reqBody.email,
      password: bcryptjs.hashSync(reqBody.password, 8), // tham s·ªë th·ª© 2 l√† ƒë·ªô ph·ª©c t·∫°p,  gi√° tr·ªã c√†ng cao bƒÉm c√†ng l√¢u
      username: nameFromEmail,
      displayName: nameFromEmail, // t√™n hi·ªÉn th·ªã v·ªÅ sau s·∫Ω c√≥ th·ªÉ thay ƒë·ªïi
      verifyToken: uuidv4()
    }
    // l∆∞u v√†o database
    const createdUser = await userModel.createNew(newUser)
    const getNewUser = await userModel.findOneById(createdUser.insertedId)
    // g·ª≠i email cho ng∆∞·ªùi d√πng x√°c th·ª±c t√†i kho·∫£n
    const verificationLink = `${WEBSITE_DOMAIN}/account/verification?email=${getNewUser.email}&token=${getNewUser.verifyToken}`
    const customSubject = 'Trello Liptwo: Please verify your email before using our service!'
    const customHtmlContent = htmlContent(verificationLink)
    //g·ªçi t·ªõi provider g·ª≠i mail
    // const result = await BrevoProvider.sendEmail(getNewUser.email, customSubject, customHtmlContent)
    // console.log('üöÄ ~ userService.js:41 ~ createNew ~ result:', result)
    await notifyAdmin(getNewUser.email, customSubject, customHtmlContent)
    // return
    return pickUser(getNewUser)
  } catch (error) { throw error }
}

const verifyAccount = async (reqBody) => {
  try {
    // Query user trong database

    const existUser = await userModel.findOneByEmail(reqBody.email)
    // C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if ( !existUser ) throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found!')
    if ( existUser.isActive ) throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Account is already active!')
    if ( existUser.verifyToken !== reqBody.token ) throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Token is invalid!')

    // N·∫øu nh∆∞ m·ªçi th·ª© ok th√¨ ch√∫ng ta b·∫Øt ƒë·∫ßu update l·∫°i th√¥ng tin c·ªßa th·∫±ng user ƒë·ªÉ verify account
    const updateData = {
      isActive: true,
      verifyToken: null
    }
    // Update th√¥ng tin user
    const updatedUser = await userModel.update( existUser._id, updateData)
    return pickUser(updatedUser)
  } catch (error) { throw error }
}

const login = async (reqBody) => {
  try {
    // Query user trong database
    const existUser = await userModel.findOneByEmail(reqBody.email)

    // C√°c b∆∞·ªõc ki·ªÉm tra c·∫ßn thi·∫øt
    if ( !existUser ) throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your email or Password is incorrect!')
    if ( !existUser.isActive ) throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Account isn\'t active!')
    if ( !bcryptjs.compareSync(reqBody.password, existUser.password)) {
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your email or Password is incorrect!')
    }
    // jsonwebtoken
    // N·∫øu m·ªçi th·ª© ok th√¨ b·∫Øt ƒë·∫ßu t·∫°o Tokens ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£ v·ªÅ cho ph√≠a FE
    // T·∫°o th√¥ng tin s·∫Ω ƒë√≠nh k√®m trong JWT Token bao g·ªìm _id v√† email c·ªßa user
    const userInfo = {
      _id: existUser._id,
      email: existUser.email
    }
    // T·∫°o ra 2 lo·∫°i token, accessToken v√† refreshToken ƒë·ªÉ tr·∫£ v·ªÅ cho ph√≠a FE
    const accessToken = await JwtProvider.generationToken(
      userInfo,
      ENV.ACCESS_TOKEN_SECRET_SIGNATURE,
      // 5 // 5 gi√¢y
      ENV.ACCESS_TOKEN_LIFE
    )

    const refreshToken = await JwtProvider.generationToken(
      userInfo,
      ENV.REFRESH_TOKEN_SECRET_SIGNATURE,
      // 15
      ENV.REFRESH_TOKEN_LIFE
    )

    // Tr·∫£ v·ªÅ th√¥ng tin c·ªßa user k√®m theo 2 c√°i token v·ª´a t·∫°o ra
    return { accessToken, refreshToken, ...pickUser(existUser) }
  } catch (error) { throw error }
}

const refreshToken = async (clientRefreshToken) => {
  try {
    // Verify / gi·∫£i m√£ c√°i refresh token xem c√≥ h·ª£p l·ªá kh√¥ng
    const refreshTokenDecoded = await JwtProvider.verifyToken(clientRefreshToken,
      ENV.REFRESH_TOKEN_SECRET_SIGNATURE)

    // ƒêo·∫°n n√†y v√¨ ch√∫ng ta ch·ªâ l∆∞u nh·ªØng th√¥ng tin unique v√† c·ªë ƒë·ªãnh c·ªßa user trong token r·ªìi, v√¨ v·∫≠y c√≥ th·ªÉ
    // l·∫•y lu√¥n t·ª´ decoded ra, ti·∫øt ki·ªám query v√†o DB ƒë·ªÅ l·∫•y data m·ªõi.
    const userInfo = {
      _id: refreshTokenDecoded._id,
      email: refreshTokenDecoded.email
    }
    // T·∫°o accessTokeg m·ªõi
    const accessToken = await JwtProvider.generateToken(
      userInfo,
      ENV.ACCESS_TOKEN_SECRET_SIGNATURE,
      // 5 // 5 gi√¢y ƒë·ªÉ test accessToken h·∫øt h·∫°n
      ENV.ACCESS_TOKEN_LIFE // 1 ti·∫øng
    )
    return { accessToken }
  } catch (error) { throw error }
}

export const userService = {
  createNew,
  verifyAccount,
  login,
  refreshToken
}